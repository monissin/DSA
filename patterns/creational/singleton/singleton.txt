Define a class that has only one instance and provide a global point of access to it.
There are two forms of singleton design pattern
    Early Instantiation: creation of instance at load time.
    Lazy Instantiation: creation of instance when required.

To create the singleton class, we need to have static member of class, private constructor and static factory method.
Static member: It gets memory only once because of static, it contains the instance of the Singleton class.
Private constructor: It will prevent to instantiate the Singleton class from outside the class.
Static factory method: This provides the global point of access to the Singleton object and returns the instance to the caller.

Significance of Serialization in Singleton Pattern
If singleton class is Serializable, you can serialize the singleton instance.
Once it is serialized, you can deserialize it but it will not return the singleton object.
To resolve this issue, you need to override the readResolve() method that enforces the singleton.
It is called just after the object is deserialized. It returns the singleton object.

public class A implements Serializable {
        //your code of singleton
        protected Object readResolve() {
            return getA();
        }

    }

Pros
1. Saves memory because object is not created at each request.
2. Singleton pattern lets you access some object from anywhere in the program.
   However, it also protects that instance from being overwritten by other code.
3. The singleton object is initialized only when it’s requested for the first time.

Cons
1. Violates the Single Responsibility Principle. The pattern solves two problems at the time.
2. The pattern requires special treatment in a multithreaded environment so that multiple threads won’t create a singleton object several times.
3. It may be difficult to unit test the client code of the Singleton because many test frameworks rely on inheritance when producing mock objects.
   Since the constructor of the singleton class is private and overriding static methods is impossible in most languages, you will need to think of a creative way to mock the singleton.
