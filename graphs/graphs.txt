A Graph is a data structure that consists of the following two components:
    1. A finite set of vertices also called nodes.
    2. A finite set of ordered pair of the form (u, v) called as edge.
    The pair is ordered because (u, v) is not the same as (v, u) in case of a directed graph(digraph).
    The pair of the form (u, v) indicates that there is an edge from vertex u to vertex v.
    The edges may contain weight/value/cost.
Directed Graphs: The Directed graphs are such graphs in which edges are directed in a single direction.
Undirected Graphs: Undirected graphs are such graphs in which the edges are directionless or in other words bi-directional.
                   That is, if there is an edge between vertices u and v then it means we can use the edge to go from both u to v and v to u.
Following two are the most commonly used representations of a graph:
    1. Adjacency Matrix: The Adjacency Matrix is a 2D array of size V x V where V is the number of vertices in a graph.
    Let the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j.
    Adjacency matrix for undirected graph is always symmetric.
    Adjacency Matrix is also used to represent weighted graphs.
    If adj[i][j] = w, then there is an edge from vertex i to vertex j with weight w.

    Operations:
    1. Check if u and v are adjacent : O(1)
    2. All vertices adjacent to u : O(V)
    3. Degree of u: O(V)
    4. Add/remove an edge: O(1)
    5. Add/remove a vertex: O(V^2)
    Pros:
        Representation is easier to implement and follow.
        Removing an edge takes O(1) time.
        Queries like whether there is an edge from vertex 'u' to vertex 'v' are efficient and can be done O(1).
    Cons:
        Consumes more space O(V^2).
        Even if the graph is sparse(contains less number of edges), it consumes the same space.
        Adding a vertex is O(V^2) time.
    2. Adjacency List: Graph can also be implemented using an array of lists.
    That is every index of the array will contain a complete list.
    Size of the array is equal to the number of vertices and every index i in the array will store the list of vertices connected to the vertex numbered i.
    Let the array be array[]. An entry array[i] represents the list of vertices adjacent to the ith vertex.
    This representation can also be used to represent a weighted graph. The weights of edges can be represented as lists of pairs.
     Operations:
        1. Check if u and v are adjacent : O(V)
        2. All vertices adjacent to u : O(degree(u))
        3. Degree of u: O(1)
        4. Add an edge: O(1)
        5. remove an edge: O(E)
        6. Add a vertex: O(1)
        7. remove a vertex: O(|V|+|E|)
    Pros:
        Saves space O(|V|+|E|).
        In the worst case, there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space.
        Adding a vertex is easier.
    Cons:
        Queries like whether there is an edge from vertex u to vertex v are not efficient and can be done O(V).


Note: In Real-life problems,  graphs are sparse(|E| <<|V|^2).
Thatâ€™s why adjacency lists Data structure is commonly used for storing graphs.